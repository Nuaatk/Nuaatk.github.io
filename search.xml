<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DDR重要时序参数</title>
    <url>/2023/06/17/DDR%E9%87%8D%E8%A6%81%E6%97%B6%E5%BA%8F%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="DRAM时序"><a href="#DRAM时序" class="headerlink" title="DRAM时序"></a>DRAM时序</h1><p><img  
                     lazyload
                     alt="image"
                     data-src="E:\Hexo\hexo-theme-keep-starter\source\images\dramphase.svg"
                      alt="dramphase"
                ></p>
<ul>
<li>tCK：指的是DRAM内部时钟的周期时间。</li>
<li>CL：读取命令发出后到从列地址读出数据到IO接口的间隔时间。列地址代表了内存cell的比特线，是内存cell中实际发生读写操作的接口，换句话说就是列地址连接着储存数据信息的电容，写入时电荷从列地址流向电容，读取时电荷从电容流向列地址，并输出到DQ引脚 </li>
<li>AL：从DDR2起，RAS指令后可以马上接CAS指令，但比起传统的RAS后等tRCD再发送CAS的方式，数据能够从阵列中读出的延时并不能间断，AL就是用来表征这段额外延时</li>
</ul>
<p>​		如果采取RAS指令马上接CAS指令的方式，AL&#x3D;tRCD-1，如果等tRCD再接CAS指令，则不		用计算AL ;RL&#x3D;(CL+AL)</p>
<ul>
<li><p>RL：Read Latency，总的读延迟，RL &#x3D; AL + CL</p>
</li>
<li><p>WL ：Wead Latency，总的写延迟，WL &#x3D; （RL - 1）&#x2F;&#x2F;AL + CWL</p>
</li>
<li><p>BL：Bus Latency&#x2F;burst lengths</p>
</li>
<li><p>tRAS:(Row Address Strobe)：RAS指令持续时间,tRAS可以理解为内存完成一个行、列地址激活操作的贤者时间，内存控制器从发出“ACT”指令激活行&#x2F;列地址后进行下一个指令必须等待一个完整的tRAS时钟周期，也就是tRAS包含了tRCD和CL的操作，所以tRAS通常大于等于tRCD+CL，尤其是在大容量内存上可以适当放宽tRAS时序，在tRCD+CL的基础上加多几个时钟周期有助于稳定性的提高。</p>
</li>
<li><p>tRCD：RAS to CAS Delay ,定义了内存控制器发出“ACT”指令激活某个Bank中的某一行地址所需要的时间，在完成tRCD后，内存才会接着发送列地址以及读写指令，进行读写操作。</p>
</li>
<li><p>tRRD：向不同Bank中同一行两次发送行地址的间隔，</p>
<p>定义的是连续激活两行地址的最低等待时钟周期，当内存进行频繁读写时，会连续激活行地址进行读写操作，tRRD就是连续激活两行地址所需的等待时钟周期 </p>
</li>
<li><p>tRC：行地址周期时间，定义的是内存完成行地址操作所需的时钟周期。tRC包括了tRAS和tRP两个操作，tRAS激活行地址，tRP完成预充电，tRC指的是完成整个行地址操作所需时间。 </p>
</li>
<li><p>tRP：Precharge time，定义的是在同一个Bank中，前一个行地址读写操作已经完成，准备对下一个行地址操作时，对下一个行地址进行的预充电。</p>
</li>
<li><p>tCCD：CAS和CAS最短间隔</p>
</li>
<li><p>tRTP：read to precharge，定义了控制器发出读取命令后到下一个预充电命令的延迟时间。</p>
</li>
<li><p>tWTR：write to read，定义了控制器发出写入命令后到读取命令的间隔时间。</p>
</li>
<li><p>tWR：写入恢复延迟，定义的是内存Bank中进行写入命令后需要等待多少个时钟周期，才能进行预充电命令和下一个操作。这个时序用于确保Bank中已激活的地址能将数据完整保存进内存cell的电容中。 </p>
</li>
<li><p>tRTRS：Rank-to-Rank Switching Time，从一个DRAM rank的访问到另一个DRAM rank的访问之间所需的最小延迟时间。ACTIVATE Timing</p>
</li>
<li><p>tRFC：刷新命令与其他命令（除DES命令）之间的延迟</p>
</li>
<li><p>tFAW：一个Rank中连续激活四个行地址所需要的时间（tFAW&gt;4tRRD）指在DRAM内存中，当内存控制器连续下达激活命令时，需要等待一定的时间，才能下达下第五个激活命令。tFAW指的是这个等待时间的长度，通常以时钟周期为单位。</p>
</li>
<li><p>tCKE：从关闭时钟使能信号到DRAM芯片进入休眠状态之间所需的最小延迟时间。</p>
</li>
<li><p>tXP：在DRAM中，tXP是指在DRAM退出断电模式后，CKE变为高电平后的时间，DRAM就可以执行有效的读写操作</p>
</li>
<li><p>tCMD：指的是DRAM控制器向DRAM芯片发送指令时所需的最小延迟时间。</p>
</li>
<li><p>CWL ：CAS Write latency，Column-Address-Strobe Write。写命令与第一个送出第一个写数据之间的延迟。</p>
</li>
<li><p>WL ：Wead Latency，总的写延迟，WL &#x3D; AL + CWL</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>如何上传本地项目到GitHub</title>
    <url>/2023/06/17/github%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="上传本地项目到Github"><a href="#上传本地项目到Github" class="headerlink" title="上传本地项目到Github"></a>上传本地项目到Github</h1><h5 id="第一步：安装Git"><a href="#第一步：安装Git" class="headerlink" title="第一步：安装Git"></a>第一步：安装Git</h5><h5 id="第二步：创建文件夹"><a href="#第二步：创建文件夹" class="headerlink" title="第二步：创建文件夹"></a>第二步：创建文件夹</h5><p>创建一个本地项目所在的文件夹</p>
<p>然后右击<code>Git bash</code>在该文件夹目录下打开Git终端</p>
<h5 id="第三步：git-init"><a href="#第三步：git-init" class="headerlink" title="第三步：git init"></a>第三步：git init</h5><p>在命令行中输入<code>git init</code>使得该文件夹变成一个可由git管理的仓库</p>
<h5 id="第四步：git-add"><a href="#第四步：git-add" class="headerlink" title="第四步：git add ."></a>第四步：git add .</h5><p>在命令行中输入<code>git add .</code>将该文件夹所有的文件添加到缓存区</p>
<h5 id="第五步：git-commit-m"><a href="#第五步：git-commit-m" class="headerlink" title="第五步：git commit -m"></a>第五步：git commit -m</h5><p>使用命令<code>git commit -m &quot;commit的备注信息&quot;</code></p>
<p>第六步：关联github与本地仓库</p>
<p>此步骤仅需要进行一次，输入<code>git remote add origin https://github.com/.git你自己的github网址</code></p>
<p>如果想要免密登录需要在账户设置ssh</p>
<p>第七步：git push origin master</p>
<p>输入命令<code>git push origin master</code>将本地仓库推送到GitHub中</p>
<p>第一次上传添加 -u</p>
]]></content>
  </entry>
  <entry>
    <title>解决hexo d 命令报错 Deploer not found git</title>
    <url>/2023/06/17/hexo%20d%20%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%20Deploer%20not%20found%20git/</url>
    <content><![CDATA[<h1 id="解决hexo-d-命令报错-Deploer-not-found-git"><a href="#解决hexo-d-命令报错-Deploer-not-found-git" class="headerlink" title="解决hexo d 命令报错 Deploer not found git"></a>解决hexo d 命令报错 Deploer not found git</h1><p>安装hexo-deployer-git</p>
<p>命令：</p>
<p><code>npm insatll --save hexo-deployer-git</code></p>
]]></content>
  </entry>
</search>
